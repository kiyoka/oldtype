;; -*- coding: utf-8; mode: kahua -*-
;;
;;  Copyright (c) 2008 Kiyoka Nishiyama, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id:$
;;


(define (oldtype:static-base-path)
  (string-append "/kahua/" (kahua-worker-type) "/"))


(define (oldtype:static-image-path)
  (string-append "/kahua/" (kahua-worker-type) "/staticimg/"))

(define (oldtype:space->nbsp string)
  (define _nbsp "\u00a0")
  (regexp-replace-all #/ / string _nbsp))


;;<!-- SiteSearch Google -->
;;<form action="http://www.google.com/cse" id="cse-search-box">
;;  <div>
;;    <input type="hidden" name="cx" value="005847915313634728664:qzl0os7e8d4" />
;;    <input type="hidden" name="ie" value="UTF-8" />
;;    <input type="text" name="q" size="31" />
;;    <input type="submit" name="sa" value="検索" />
;;  </div>
;;</form>
;;<script type="text/javascript" src="http://www.google.com/coop/cse/brand?form=cse-search-box&lang=ja"></script>
;;<!-- SiteSearch Google -->
(define (oldtype:google-searchbox)
  (node-set/
   (form/ (@/ (method "get")
              (action "http://www.google.com/cse")
              (id     "cse-search-box"))
          (div/
           (input/ (@/ (type  "hidden")
                       (name  "cx")
                       (value "005847915313634728664:qzl0os7e8d4")))
           (input/ (@/ (type  "hidden")
                       (name  "ie")
                       (value "UTF-8")))
           (input/ (@/ (type  "text")
                       (name  "q")
                       (size  "31")))
           (input/ (@/ (type  "submit")
                       (name  "sa")
                       (value "検索")))))
   (script/ (@/ (type  "text/javascript")
                (src   "http://www.google.com/coop/cse/brand?form=cse-search-box&lang=ja")))))

(define (oldtype:icon-image sym)
  (case sym
    ((info)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.info.png"))
               (alt "INFO") (class "icon"))))
    ((edit)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.pencil.png"))
               (alt "EDIT") (class "icon"))))
    ((logo)
     (a/ (@/ (href "/")
             (class "help")
             (title "Click here to open top page"))
         (img/ (@/ (src (string-append (oldtype:static-image-path) "oldtype_logo_small.png"))
                   (class "logo")
                   (alt "OldTypeLogo")))))
    ((new0)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.new0.png"))
               (alt "0") (class "icon"))))
    ((new1)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.new1.png"))
               (alt "1") (class "icon"))))
    ((new2)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.new2.png"))
               (alt "2") (class "icon"))))
    ((new3)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.new3.png"))
               (alt "3") (class "icon"))))
    ((new4)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.new4.png"))
               (alt "4") (class "icon"))))
    ((new5)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.new5.png"))
               (alt "5") (class "icon"))))
    ((vline0)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "vline.new0.png"))
               (class "barcode") (alt "0"))))
    ((vline1)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "vline.new1.png"))
               (class "barcode") (alt "1"))))
    ((vline2)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "vline.new2.png"))
               (class "barcode") (alt "2"))))
    ((vline3)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "vline.new3.png"))
               (class "barcode") (alt "3"))))
    ((vline4)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "vline.new4.png"))
               (class "barcode") (alt "4"))))
    ((vline5)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "vline.new5.png"))
               (class "barcode") (alt "5"))))
    ((ul1)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "dot18.png"))
               (alt "-") (class "icon"))))
    ((ul2)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "dot14.png"))
               (alt "--") (class "icon"))))
    ((ul3)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "dot12.png"))
               (alt "---") (class "icon"))))
    ((ol1)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "triangle18.png"))
               (alt "#") (class "icon"))))
    ((ol2)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "triangle14.png"))
               (alt "##") (class "icon"))))
    ((ol3)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "triangle12.png"))
               (alt "###") (class "icon"))))
    ((cancel)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.cancel_round.png"))
               (alt "[X]") (class "icon"))))
    ((rss)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.rss.png"))
               (alt "RSS"))))
    ((plain)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.article_text.png"))
               (alt "PLAIN"))))
    ((comment)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.comment_blue.png"))
               (alt "COMMENT"))))
    ((double-comment)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.double_comment.png"))
               (alt "DCOMMENT"))))
    ((alert)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.stop_round.png"))
               (alt "ALERT"))))
    ((face-ok)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.face_smile.gif"))
               (alt "OK"))))
    ((face-ng)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.face_ng.gif"))
               (alt "NG"))))
    ((face-surprise)
     (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.face_surprise.gif"))
               (alt "SURPRISE!"))))
    (else
     `(p/ ,(format "!!Error : no such icon-image \"~a\"!!" sym)))))


(define (oldtype:add-comment oldtype-page name comment)
  (apply append
         (map
          (lambda (str)
            (if (#/##\(comment\)/ str)
                `(
                  ,(format "##(comment-data ~a ~a)"
                           (uri-encode-string name)
                           (uri-encode-string comment))
                  ,str)
                `(,str)))
          (get-text-list oldtype-page))))


(define (oldtype:format-macro expr oldtype-page)
  (let ((command (car expr))
        (arg  ;; symbol list to string list.
         (map
          (lambda (x)
            (if (number? x)
                (number->string x)
                (symbol->string x)))
          (cdr expr)))
        (len (length (cdr expr))))
    (case command
      ((img img-s img-m)
       (if (< 0 len)
           (img/ (@/ (src
                      (let1 str (car arg)
                            (if (#/^[.][.]/ str)
                                (string-append (oldtype:static-base-path) "img/" str)
                                str)))
                     (alt (oldtype:otpath->basename (car arg)))
                     (height
                      (case command
                        ((img-s)
                         oldtype:image-height-s)
                        ((img-m)
                         oldtype:image-height-m)))
                     ))
           (p/ (format "!!Error : No argument ##(~a URL) command") command)))
      ((todo)
       (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.todo.png"))
                 (alt "TODO") (class "wideicon"))))
      ((done)
       (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.done.png"))
                 (alt "done") (class "wideicon"))))
      ((youtube)
       (if (< 0 len)
           (object/
            (@/ (width  "425")
                (height "355"))
            (param/
             (@/ (name  "movie")
                 (value (format "~a" (car arg)))))
            (param/
             (@/ (name  "wmode")
                 (value "transparent")))
            (embed/
             (@/ (src   (format "http://www.youtube.com/v/~a" (car arg)))
                 (type  "application/x-shockwave-flash")
                 (wmode "transparent")
                 (width "425")
                 (height"355"))))
           (p/ "!!Error : No argument ##(youtube URL) command")))

      ((youtube-s youtube-m)
       (if (< 0 len)
           (let1 _videoid (car arg)
                 (a/ (@/ (href (oldtype:youtube-link _videoid)))
                     (img/
                      (@/ (src (oldtype:youtube-thumbnail _videoid))
                          (alt _videoid)
                          (class "help")
                          (title "Click here to open YouTube.com")
                          (height (case command
                                    ((youtube-s) oldtype:image-height-s)
                                    ((youtube-m) oldtype:image-height-m)))))))
           (p/ (format "!!Error : No argument ##(~a URL) command") command)))

      ;; thumbnail image by SimpleAPI
      ((thumb)
       (if (< 0 len)
           (let1 _url (car arg)
                 (a/
                  (@/ (href _url)
                      (target "_blank"))
                  (img/
                   (@/ (src (format "http://img.simpleapi.net/small/~a" _url))
                       (alt _url)
                       (width "128")
                       (height "128")
                       (hspace "4")
                       (vspace "4")
                       (align "left")
                       (border "0")))))
           (p/ "!!Error : No argument ##(thumb URL) command")))

      ((amazon amazon-s amazon-m)
       (if (< 0 len)
           (let* ((_asin (car arg))
                  (_asin (if (#/^[0-9]+$/ _asin)
                             (format "~10,,,'0@a" _asin)
                             _asin)))
             (if (#/^[0-9a-zA-Z]+$/ _asin)
                 (a/
                  (@/ (href (oldtype:amazon-link _asin)))
                  (img/
                   (@/ (src (oldtype:amazon-thumbnail _asin))
                       (alt _asin)
                       (class "help")
                       (title "Click here to open amazon.co.jp")
                       (height (case command
                                 ((amazon)   "")
                                 ((amazon-s) oldtype:image-height-s)
                                 ((amazon-m) oldtype:image-height-m))))))
                 `(p/ ,(format "!!Error : ASIN code format error for ##(amazon asin) command \"~a\"!!" _asin))))
           (p/ (format "!!Error : No argument ##(~a URL) command") command)))

      ;; timestamp
      ((timestamp)
       (if (< 0 len)
           (let1 _utc (car arg)
                 (text/ (oldtype:utc->date-string (string->number _utc))))
           (p/ "!!Error : No argument ##(timestamp UTC) command")))

      ;; timestamp
      ((since)
       (if (< 0 len)
           (let1 _utc (car arg)
                 (text/ 
                  (oldtype:space->nbsp
                   (oldtype:utc->ago-string (string->number _utc)))))
           (p/ "!!Error : No argument ##(since UTC) command")))

      ;; download link oldtype-mode.el source code
      ((download-el)
       (a/ (@/ (href (string-append (oldtype:static-base-path) "oldtype-mode.el")))
           "[Download oldtype-mode.el now]"))

      ;; input comment
      ((comment)
       (form/cont/
        (@@/ (cont
              (entry-lambda (:keyword name comment)
                (let1 nodes 
                      (p/
                       (oldtype:icon-image 'face-surprise)
                       "Error: commit action failed.")
                      (if (or (> 1 (string-length name))
                              (> 1 (string-length comment)))
                          (set! nodes (p/
                                       (oldtype:icon-image 'face-ng)
                                       "Please input name and comment."))
                          (let1 work (make <svn-work>
                                       :url      (oldtype:get-arguments 'svn)
                                       :user     (oldtype:get-arguments 'anon-user)
                                       :pass     (oldtype:get-arguments 'anon-pass)
                                       :basepath (oldtype:workpath))
                                (init work (string-append
                                            (number->string (sys-time))
                                            "."
                                            (number->string (random-integer 100))))
                                (save-text-list work (name-of oldtype-page)
                                                (oldtype:add-comment oldtype-page name comment))
                                (let1 result (status work (name-of oldtype-page))
                                      (when (string=? "M" (car result))
                                        (begin
                                          (commit work)
                                          (clean work)
                                          (set! nodes
                                                (p/
                                                 (oldtype:icon-image 'face-ok)
                                                 "Thank you! Your comment was registered. Please wait 3 minutes and back.")))))))
                      (standard-page
                       (name-of oldtype-page)
                       (br/)
                       (div/
                        nodes
                        (p/ "Back to " (oldtype:expand-wiki-name (name-of oldtype-page))))
                       ""
                       '()
                       1)))))
        (table/ (@/ (class "comment"))
                (tr/ (th/
                      (oldtype:icon-image 'double-comment)
                      "Post a comment"))
                (tr/ (td/
                      "Name:"
                      (input/
                       (@/ (type "text") (name "name") (value "") (size 20)))))
                (tr/ (td/
                      (textarea/
                       (@/ (cols 120) (rows 3) (name "comment")))))
                (tr/ (td/
                      (input/ (@/ (id "SubmitComment")
                                  (type "submit")
                                  (value "Submit comment")
                                  (onClick "setTimeout( function () { $( 'SubmitComment' ).setAttribute( 'disabled', 'true' ); }, 10);")
                                  )))))))

      ;; display comment
      ((comment-data)
       (if (> 2 len)
           (p/ "!!Error : No argument ##(comment-data user str) command")
           (table/ (@/ (class "comment"))
                   (tr/ (th/
                         (oldtype:icon-image 'comment)
                         (uri-decode-string (car arg))))
                   (tr/ (td/
                         (map/
                          (lambda (line)
                            (p/ (@/ (class "comment")) line))
                          (string-split 
                           (uri-decode-string (cadr arg))
                           #\newline)))))))

      ;; no listing to !RecentChanges
      ((nolist)
       (p/ ""))

      (else
       `(p/ ,(format "!!Error : no such macro \"~a\"!!" command))))))


(define (oldtype:timeago seconds)
  (format "~d" (/ seconds 60)))


(define (oldtype:gen-page-path wikiname)
  (string-append
   "/show-page/" wikiname))

(define (oldtype:gen-rss-path wikiname)
  (string-append
   "/get-rss/" wikiname))

(define (oldtype:gen-plain-path wikiname)
  (string-append
   "/show-plain/" wikiname))

(define (oldtype:expand-wiki-name name)
  (let1 url-name
        (string-split name #/\|/)

        (case (length url-name)
          ((1)
           (a/ (@/ (href (string-append (oldtype:gen-page-path (car url-name))))) (car url-name)))
          (else
           (node-set
            (list
             (a/ (@/ (href (car url-name)) (target "_blank"))
                 (cadr url-name))
             (img/ (@/ (src (string-append (oldtype:static-image-path) "icon.extlink.png"))
                       (alt "EXT") (class "icon")))))))))


(define (oldtype:is-editable wikiname)
  (not (#/^!/ wikiname)))


(define (oldtype:contents-exists? wikiname)
  (file-exists?
   (gen-sexp-filename wikiname)))

(define (oldtype:kahua-app-args)
  (let1 alist
        (map
         (lambda (a b)
           (cons a b))
         (iota (length (kahua-app-args)))
         (kahua-app-args))

        (map
         (lambda (key value)
           (cons (string->symbol (cdr key))
                 (cdr value)))
         (filter (lambda (x) (= 0 (modulo (car x) 2)))  alist)
         (filter (lambda (x) (= 1 (modulo (car x) 2)))  alist))))

(define (oldtype:get-arguments sym)
  (assq-ref (oldtype:kahua-app-args) sym))

(define (oldtype:hatena-bookmarks wikiname)
  (let1 path (if (string=? wikiname "index")
                 "/"
                 (oldtype:gen-page-path wikiname))
        (node-set/
         (a/ (@/ (href (string-append "http://b.hatena.ne.jp/entry/http://" (oldtype:get-arguments 'fqdn) path))
                 (class "help")
                 (title (string-append "Click here to open the hatena bookmark page for this wiki-page.")))
             (img/ (@/ (src "http://d.hatena.ne.jp/images/b_entry_de.gif"))))
         (img/ (@/ (src (string-append "http://b.hatena.ne.jp/entry/image/http://" (oldtype:get-arguments 'fqdn) path)))))))


(define (oldtype:reference-pages/ wikiname command-list limit)
  (let* (
         (refs
          (delete-duplicates
           (filter-map
            (lambda (x)
              (if (eq? 'reference (car x))
                  (let ((from (caddr x))
                        (to   (cadr x)))
                    (if (and (string=? wikiname to)
                             (not (string=? from wikiname))
                             (not (string=? from "!RecentChanges"))
                             (not (string=? from "!AllPages")))
                        from
                        #f))
                  #f))
            command-list)))
         (refs (take* refs limit))
         (pages
          (filter
           (lambda (name)
             (member name refs))
           (map car (oldtype:reference-with-pagerank command-list))))
         (pages
          (map-with-index
           (lambda (i v)
             (cons i v))
           pages)))

    (if (null? refs)
        (text/ "")
        (map/
         (lambda (x)
           (let ((i (car x))
                 (name (cdr x)))
             (node-set/
              (text/ " ")
              (a/ (@/ (href name)
                      (class 
                        (if (> (/ limit 2) i)
                            "large"
                            "small")))
                  name))))
         pages))))


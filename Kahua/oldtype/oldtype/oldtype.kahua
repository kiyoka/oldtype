;; -*- coding: utf-8; mode: kahua -*-
;;
;;  Copyright (c) 2008 Kiyoka Nishiyama, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id:$
;;

(use oldtype.parse)
(use oldtype.format)
(use oldtype.util)
(use oldtype.core)
(use oldtype.log)
(use oldtype.timeline)
(use oldtype.page)
(use srfi-1)
(use srfi-19)
(load "oldtype/version.kahua")
(load "oldtype/util.kahua")
(use util.list)
(use util.match)
(use gauche.sequence)

(define page-template
  (kahua:make-xml-template
   (kahua-template-path "oldtype/page.xml")))


(define-entry (version)
  (kahua:xml-template->sxml
   page-template
   :title (title/ (@/ (id "title"))
		 "oldtype")
   :body (div/ (@/ (id "body"))
	       (h1/ (format "oldtype: version ~a"
			    *oldtype-version*))
	       (a/cont/ (@@/ (cont greeting))
			"greeting"))))


(define (oldtype-user-agent)
  (let1 ua (kahua-meta-ref "HTTP_USER_AGENT")
        (cond
         ((#/w3m[\/]/ ua)
          'w3m)
         (else
          #t))))
  
;; utility : oldtype-page to barcode link
(define (oldtype-page->barcode oldtype-page)
  (if (eq? 'w3m (oldtype-user-agent))
      (br/)
      (map/
       (lambda (x)
         (let ((id          (car x))
               (rank        (cdr x)))
           (a/ (@/ (href  (format "#~d" id))
                   (title "Click to jump")
                   (class "help"))
               (case rank
                 ((0)  (oldtype:icon-image 'vline0))
                 ((1)  (oldtype:icon-image 'vline1))
                 ((2)  (oldtype:icon-image 'vline2))
                 ((3)  (oldtype:icon-image 'vline3))
                 ((4)  (oldtype:icon-image 'vline4))
                 (else (oldtype:icon-image 'vline5))))))
       (map-with-index
        (lambda (index rank)
          ;; generate ( lineno . rank )
          (cons (+ 1 index) rank))
        (get-rank-list oldtype-page)))))


(define (oldtype-info-page oldtype-page lineno nodeset)
  (a/cont/
   (@@/ (cont
         (entry-lambda ()
           (standard-page
            (name-of oldtype-page)
            (br/)
            (div/
             (h2/ "Information of This Line.")
             (table/
              (tr/
               (td/ "committer")
               (td/ (get-committer oldtype-page lineno)))
              (tr/
               (td/ "commit date")
               (td/ (string-append
                     (get-date oldtype-page lineno)
                     (get-ago oldtype-page lineno))))
              (tr/
               (td/ "commit revision")
               (td/ (get-revision oldtype-page lineno)))
              (tr/
               (td/ "original-src")
               (td/ (get-text oldtype-page lineno)))
              (tr/
               (td/ "lineno")
               (td/ lineno))
              (tr/
               (td/ "EmacsLisp")
               (td/ (format ";; (oldtype-openfile \"~a\" ~a)" (name-of oldtype-page) lineno))))
             (h2/ "Information of This Page.")
             (pre/
              (node-set
               (map-with-index
                (lambda (index orig)
                  (if (eq? (+ index 1) lineno)
                      (b/ (@/ (class "here"))
                          (string-append orig "\n"))
                      (string-append orig "\n")))
                (get-text-list oldtype-page)))))
            ""
            #f
            ))))
   nodeset))


;; utility : oldtype-page to highger-order-tag
(define (oldtype-control-panel oldtype-page lineno light-flag)
  (node-set
   (let ((date-message (string-append
                        "edited on "
                        (get-ago   oldtype-page lineno)
                        (get-date  oldtype-page lineno)))
         (person-message (string-append
                          "edited by "
                          (get-committer   oldtype-page lineno))))
     (list
      (oldtype-info-page oldtype-page lineno
                         (span/ (@/ (title date-message)
                                    (class "help"))
                                (case (get-rank   oldtype-page lineno)
                                  ((0)  (oldtype:icon-image 'new0))
                                  ((1)  (oldtype:icon-image 'new1))
                                  ((2)  (oldtype:icon-image 'new2))
                                  ((3)  (oldtype:icon-image 'new3))
                                  ((4)  (oldtype:icon-image 'new4))
                                  (else (if light-flag
                                            (oldtype:space->nbsp "  ")
                                            (oldtype:icon-image 'new5))))))
      (let1 committer-str
            (get-committer   oldtype-page lineno)
            (a/ (@/ (href
                     (oldtype:gen-page-path committer-str)))
                (span/
                 (@/ (class "help")
                     (title person-message))
                 (img/
                  (@/ 
                   (class "icon")
                   (src
                    (string-append
                     (oldtype:static-image-path) "../img/" committer-str ".png")))))))))))


;; utility : oldtype-page to highger-order-tag
(define (oldtype-page->higher-order-tag oldtype-page)
  (let ((is-w3m (eq? 'w3m (oldtype-user-agent)))
        (sxmls  (sxml-of oldtype-page)))
    (div/
     (node-set
      (let rec
          ((sxmls sxmls))
        (match sxmls
               (()  '())
               (((and (name . _) sxml) . rest) ;; generic node
                (let1 arg (cdr sxml)
                      (cons
                       (case name
                         ((div)
                          (let* ((param (car arg)) ;; param is assoc-list
                                 (lineno (assq-ref param 'lineno))
                                 (_first
                                  (oldtype-control-panel oldtype-page lineno is-w3m))
                                 (_rest
                                  (node-set (rec (cdr arg)))))
                            (if is-w3m
                                (span/ _first " " _rest (br/))
                                (let1 lineno (assq-ref param 'lineno)
                                      `(,@(div/
                                           (@/
                                            (id    lineno)
                                            (class (format "new~d" (get-rank oldtype-page lineno)))
                                            (style "float: none;"))
                                           (div/ (@/ (style "position: absolute; left: 2em; font-size: small;"))
                                                 _first)
                                           (if (oldtype:is-editable (name-of oldtype-page))
                                               (div/ (@/ (style "padding-left:  5em;")
                                                         (onDblClick (format "otEditStart( ~a );" lineno)))
                                                     _rest)
                                               (div/ (@/ (style "padding-left:  5em;"))
                                                     _rest))
                                           (div/ (@/
                                                  (id (format "~a:editarea" lineno))
                                                  (style "display: none; height: 4em; padding-left: 5em;"))
                                                 (form/ (@/ (id (format "~a:editform" lineno))
                                                            (action "."))
                                                        (input/ (@/
                                                                 (id (format "~a:edittext" lineno))
                                                                 (size 80)
                                                                 (type "text")
                                                                 (value (get-text oldtype-page lineno))))
                                                        (oldtype:space->nbsp "  ")
                                                        (input/ (@/
                                                                 (type "button")
                                                                 (value "Submit")
                                                                 (onClick (format "otEditEnd( ~a );" lineno))))
                                                        (br/)
                                                        (strong/ (@/ (class "notice"))
                                                                 "This is a demonstration. you cannot update this wiki page, sorry...")))))))))
                         ((a)
                          (let1 param (car arg) ;; param is assoc-list
                                `(,@(a/
                                     (@/
                                      (href (assq-ref param 'href)))
                                     (node-set (rec (cdr arg)))))))
                         ((p-normal pre-quote pre-verb pre-ul1 pre-ul2 pre-ul3 pre-ol1 pre-ol2 pre-ol3 h1 h2 h3 h4 h5 h6)
                          (if is-w3m
                              (case name
                                ((p-normal)    `(,@(span/                                (node-set (rec arg)))))
                                ((pre-quote)   `(,@(span/                                (node-set (rec arg)))))
                                ((pre-verb)    `(,@(span/ (b/                            (node-set (rec arg))))))
                                ((pre-ul1)     `(,@(span/ 
                                                    (oldtype:icon-image 'ul1)            (node-set (rec arg)))))
                                ((pre-ul2)     `(,@(span/
                                                    (oldtype:space->nbsp " ")
                                                    (oldtype:icon-image 'ul2)            (node-set (rec arg)))))
                                ((pre-ul3)     `(,@(span/
                                                    (oldtype:space->nbsp "  ")
                                                    (oldtype:icon-image 'ul3)            (node-set (rec arg)))))
                                ((pre-ol1)     `(,@(span/
                                                    (oldtype:icon-image 'ol1)            (node-set (rec arg)))))
                                ((pre-ol2)     `(,@(span/
                                                    (oldtype:space->nbsp " ")
                                                    (oldtype:icon-image 'ol2)            (node-set (rec arg)))))
                                ((pre-ol3)     `(,@(span/ 
                                                    (oldtype:space->nbsp "  ")
                                                    (oldtype:icon-image 'ol3)            (node-set (rec arg)))))
                                ((h1)          `(,@(h1/ (@/ (id "h1"))                   (node-set (rec arg)))))
                                ((h2)          `(,@(h2/ (@/ (id "h2"))                   (node-set (rec arg)))))
                                ((h3)          `(,@(h3/ (@/ (id "h3"))                   (node-set (rec arg)))))
                                ((h4)          `(,@(h4/ (@/ (id "h4"))                   (node-set (rec arg)))))
                                ((h5)          `(,@(h5/ (@/ (id "h5"))                   (node-set (rec arg)))))
                                ((h6)          `(,@(h6/ (@/ (id "h6"))                   (node-set (rec arg))))))
                              (case name
                                ((p-normal)    `(,@(p/   (@/ (class "oldtype"))          (node-set (rec arg)))))
                                ((pre-quote)   `(,@(pre/ (@/ (class "quote"))            (node-set (rec arg)))))
                                ((pre-verb)    `(,@(pre/ (@/ (class "verb"))             (node-set (rec arg)))))
                                ((pre-ul1)     `(,@(pre/ (@/ (class "ul1"))              (node-set (rec arg)))))
                                ((pre-ul2)     `(,@(pre/ (@/ (class "ul2"))              (node-set (rec arg)))))
                                ((pre-ul3)     `(,@(pre/ (@/ (class "ul3"))              (node-set (rec arg)))))
                                ((pre-ol1)     `(,@(pre/ (@/ (class "ol1"))              (node-set (rec arg)))))
                                ((pre-ol2)     `(,@(pre/ (@/ (class "ol2"))              (node-set (rec arg)))))
                                ((pre-ol3)     `(,@(pre/ (@/ (class "ol3"))              (node-set (rec arg)))))
                                ((h1)          `(,@(h1/  (@/ (id "h1"))                  (node-set (rec arg)))))
                                ((h2)          `(,@(h2/  (@/ (id "h2"))                  (node-set (rec arg)))))
                                ((h3)          `(,@(h3/  (@/ (id "h3"))                  (node-set (rec arg)))))
                                ((h4)          `(,@(h4/  (@/ (id "h4"))                  (node-set (rec arg)))))
                                ((h5)          `(,@(h5/  (@/ (id "h5"))                  (node-set (rec arg)))))
                                ((h6)          `(,@(h6/  (@/ (id "h6"))                  (node-set (rec arg))))))))
                         ((wiki-macro)  `(,@(oldtype:format-macro arg)))
                         ((wiki-name)   `(,@(oldtype:expand-wiki-name (car arg))))
                         ((hr)          (hr/))
                         (else
                          `(p/ ,(format "!!Error : no such tag \"~a\"!!" name))))
                       (rec rest))))
               ((other . rest)
                (cons
                 (if (string? other)
                     (oldtype:space->nbsp other)
                     other)
                 (rec rest)))))))))


(define (standard-page wikiname barcode nodes first-line rss-flag)
  (html/ (head/ (title/ (string-append wikiname " / " first-line))
                (link/ (@/ (rel "stylesheet") (type "text/css")
                           (href (string-append "/kahua/" (kahua-worker-type) "/oldtype.css"))))
                (link/ (@/ (rel "stylesheet") (type "text/css")
                           (href (string-append "/kahua/" (kahua-worker-type) "/import/tooltips.css"))))
                (when/ rss-flag
                       (link/ (@/ (rel "alternate") (type "application/rss+xml")
                                  (href (string-append "/get-rss/" wikiname )))))
                (script/ (@/ (src (string-append "/kahua/" (kahua-worker-type) "/import/prototype.js"))      (type "text/javascript")))
                (script/ (@/ (src (string-append "/kahua/" (kahua-worker-type) "/import/scriptaculous.js"))  (type "text/javascript")))
                (script/ (@/ (src (string-append "/kahua/" (kahua-worker-type) "/import/tooltips.js"))       (type "text/javascript")))
                (script/ (@/ (src (string-append "/kahua/" (kahua-worker-type) "/oldtype.js"))               (type "text/javascript"))))
         (body/
          (@/ (onload "setup_tooltips();"))
          (div/ (@/ (class "header"))
                (if (eq? 'w3m (oldtype-user-agent))
                    (div/
                     (format " ;; (oldtype-openfile \"~a\" 1)" wikiname)
                     (br/))
                    (text/ ""))
                (oldtype:icon-image 'logo)
                (a/ (@/ (href (oldtype:gen-page-path "!RecentChanges"))
                        (class "help")
                        (title "Recent changes of This site"))
                    "[RecentChanges]")
                (text/ " ")
                (a/ (@/ (href (oldtype:gen-page-path "!AllPages"))
                        (class "help")
                        (title "All wiki pages of This site"))
                    "[AllPages]")
                (text/ " ")
                (span/ "(Late")
                (oldtype:icon-image 'new4)
                (oldtype:icon-image 'new3)
                (oldtype:icon-image 'new2)
                (oldtype:icon-image 'new1)
                (oldtype:icon-image 'new0)
                (span/ "Latest)")
                (span/ (@/ (class "forw3m"))))
          (br/)
          (h1/
           wikiname
           " "
           (a/ (@/ (href (oldtype:gen-rss-path wikiname))
                   (class "help")
                   (title "This is RSS feed URL"))
               (oldtype:icon-image 'rss))
           (oldtype:hatena-bookmarks wikiname))
          barcode
          (hr/)
          nodes
          (div/ (@/ (class "footer"))
                "Generated by OldType "
                *oldtype-version*)
          (br/)
          (br/)
          (br/))))


(define (oldtype-first-line oldtype-page)
  (car 
   (filter
    (lambda (x)
      (not (or
            (#/^[ ]*$/ x)
            (#/^[ ]*##/ x))))
    (get-text-list oldtype-page))))


(define (show-page/page wikiname)
  (let1 oldtype-page (oldtype:load-page (kahua-site-root) wikiname)
        (standard-page
         wikiname
         (if oldtype-page
             (oldtype-page->barcode oldtype-page)
             (br/))
         (if oldtype-page
             (oldtype-page->higher-order-tag oldtype-page)
             (div/
              (p/
               (@/ (class "center"))
               (strong/
                (@/ (class "caption"))
                "This wikipage was not found."))))
         (if oldtype-page
             (oldtype-first-line oldtype-page)
             "")
         (not (null? (get-rss-entry-pages oldtype-page))))))


(define-entry (show-page wikiname)
  (let ((wikiname (or wikiname "index")))
    (show-page/page wikiname)))


;; define elements for RSS 2.0
(define-elements channel rss description lastBuildDate docs generator item pubDate)

;; get-rss entry
(define (gen-rss/ base-url index-page entry-pages)
  (let1 wikiname (name-of index-page)
        (rss/ (@/ (version "2.0"))
              (channel/
               (title/                (string-append wikiname "::" (oldtype-first-line index-page)))
               (link/                 (string-append base-url "show-page/" wikiname))
               (description/          (oldtype-first-line index-page))
               (lastBuildDate/        (oldtype:utc->date-string (sys-time)))
               (docs/                 "http://blogs.law.harvard.edu/tech/rss")
               (generator/            (string-append "OldType version " *oldtype-version*))
               (map/
                (lambda (e)
                  (item/
                   (title/            (string-append (name-of e) "::" (oldtype-first-line e)))
                   (link/             (string-append base-url "show-page/" (name-of e)))
                   (pubDate/          (oldtype:utc->date-string
                                       (utc-of
                                        (get-latest-log
                                         (timeline-of e)))))))
                entry-pages)
               ))))

(define-entry (get-rss wikiname)
  (let1 oldtype-page (oldtype:load-page (kahua-site-root) wikiname)
        (when/ oldtype-page
               (gen-rss/ 
                (format "http://~a/" (oldtype:get-arguments 'fqdn))
                oldtype-page
                         (filter-map
                          (lambda (x)
                            (oldtype:load-page (kahua-site-root) (cdr x)))
                          (get-rss-entry-pages oldtype-page))))))


;;
;; initialization
;;
(initialize-main-proc show-page)
(initialize-main-proc get-rss)

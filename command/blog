#!/usr/local/bin/gosh
;;;
;;; blog - generating blog aggregate page.
;;;
;;;  Copyright (c) 2008 Kiyoka Nishiyama, All rights reserved.
;;;
;;;  Permission is hereby granted, free of charge, to any person
;;;  obtaining a copy of this software and associated documentation
;;;  files (the "Software"), to deal in the Software without restriction,
;;;  including without limitation the rights to use, copy, modify,
;;;  merge, publish, distribute, sublicense, and/or sell copies of
;;;  the Software, and to permit persons to whom the Software is
;;;  furnished to do so, subject to the following conditions:
;;;
;;;  The above copyright notice and this permission notice shall be
;;;  included in all copies or substantial portions of the Software.
;;;
;;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;;  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;;  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;;  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
;;;  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
;;;  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
;;;  OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
;;;  IN THE SOFTWARE.

(use srfi-1)
(use util.list)
(use oldtype.util)


(define ot-new-entry-limit 10)


(define ot-blog (format "~a/!~a.blog"
                        (oldtype:editpath)
                        (oldtype:user-local)))

(define ot-blog-header (format "~a.blog_header.ot"
                               (oldtype:user-local)))

(define (ot-blog-entrylist)
  (reverse
   (sort
    (oldtype:get-pagelist (string-append
                           (oldtype:user-local)
                           "[.]([0-9]+)")))))

(define (output-blog save-filename entrylist appendix)
  (with-output-to-file save-filename
    (lambda ()
      (for-each
       (lambda (filename)
         (with-input-from-file (string-append (oldtype:editpath) "/" filename)
           (lambda ()
             (when (#/[.][0-9]+/ filename)
               (begin
                 (display "----") (newline)
                 (newline)
                 (newline)
                 (display 
                  (string-append "* [[" (oldtype:otpath->wikiname filename) "]]"))))
             (for-each
              (lambda (line)
                (if (and (#/##\(comment\)/ line) (not (#/^[!]/ line)))
                    (print (string-append "comment please => [[" (oldtype:otpath->wikiname filename) "]]"))
                    (print line)))
              (port->string-list (current-input-port))))))
       entrylist)
      (display appendix)
      (newline))))


(define (output-blog-list save-filename group-entries)
  (with-output-to-file save-filename
    (lambda ()
      (print "  Past blog entries. ")
      (for-each
       (lambda (group)
         (let ((month_year (car group))
               (entries    (cdr group)))
           (print 
            (string-append "* [[!" (oldtype:user-local) ".blog." month_year "]]"))
           (for-each
            (lambda (filename)
              (with-input-from-file (string-append (oldtype:editpath) "/" filename)
                (lambda ()
                  (when (#/[.][0-9]+/ filename)
                    (display
                     (string-append "-   [[" (oldtype:otpath->wikiname filename) "]]"))
                    (let* ((lst (port->string-list (current-input-port)))
                           (image-line (oldtype:thumbnail-filter lst)))
                      (print (car lst)) ;; first line
                      (when (< 0 (string-length image-line))
                        (print image-line)))))))
            (reverse (sort entries)))))
       group-entries))))


(define (main argv)
  (output-blog (string-append ot-blog ".ot")
               (cons
                ot-blog-header
                (take* (ot-blog-entrylist) ot-new-entry-limit))
               "")
  (output-blog-list (string-append ot-blog ".list.ot")
                    (sort 
                     (oldtype:grouping-blog-entries
                      (ot-blog-entrylist))
                     (lambda (x y) (string>? (car x) (car y)))))

  (for-each
   (lambda (x)
     (let ((year_month (car x))
           (entries    (cdr x)))
       (output-blog (string-append ot-blog "." year_month ".ot")
                    (cons
                     ot-blog-header
                     (reverse entries))
                    "##(nolist)")))
   (oldtype:grouping-blog-entries
    (ot-blog-entrylist)))
  
  (exit 0))

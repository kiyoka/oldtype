#!/usr/local/bin/gosh

(use srfi-1)
(use util.list)
(use oldtype.util)


(define ot-new-entry-limit 10)


(define ot-blog (format "~a/!~a.blog"
                        (oldtype:editpath)
                        (oldtype:user-local)))

(define ot-blog-header (format "~a.blog_header.ot"
                               (oldtype:user-local)))

(define (ot-blog-entrylist)
  (reverse
   (sort
    (oldtype:get-pagelist (string-append
                           (oldtype:user-local)
                           "[.]([0-9]+)")))))

(define (output-blog save-filename entrylist appendix)
  (with-output-to-file save-filename
    (lambda ()
      (for-each
       (lambda (filename)
         (with-input-from-file (string-append (oldtype:editpath) "/" filename)
           (lambda ()
             (when (#/[.][0-9]+/ filename)
               (begin
                 (display "----") (newline)
                 (newline)
                 (newline)
                 (display 
                  (string-append "* [[" (oldtype:otpath->wikiname filename) "]]"))))
             (for-each
              (lambda (line)
                (if (#/##\(comment\)/ line)
                    (print (string-append "comment please => [[" (oldtype:otpath->wikiname filename) "]]"))
                    (print line)))
              (port->string-list (current-input-port))))))
       entrylist)
      (display appendix)
      (newline))))

;;
;; test pattern:
;;  (thumbnail-filter "line 1 line 2 line 3 line 4 ##(amazon 4873113482) ##(img-s ../img/abc.jpg)")
;; result:
;;  "##(img-s ../img/abc.jpg)  ##(amazon-s 4873113482) "
;; 
(define (thumbnail-filter contents-str)
  (let1 ret '()
        (regexp-replace-all
         #/##\((img|img-s|img-m|youtube|youtube-s|youtube-m|amazon|amazon-s|amazon-m)[ ]+([^\)]+)\)/
         contents-str
         (lambda (m)
           (push! ret (list
                       (rxmatch-substring m 1)
                       (rxmatch-substring m 2)))))
        (string-join
         (map
          (lambda (x)
            (let1 command-pair (string-split (car x) #\-)
                  (string-append
                   "##(" (car command-pair) "-s " (cadr x) ") ")))
          (reverse ret)))))


(define (output-blog-list save-filename entrylist)
  (with-output-to-file save-filename
    (lambda ()
      (for-each
       (lambda (filename)
         (with-input-from-file (string-append (oldtype:editpath) "/" filename)
           (lambda ()
             (when (#/[.][0-9]+/ filename)
               (display
                (string-append "- [[" (oldtype:otpath->wikiname filename) "]]"))
               (let* ((lst (port->string-list (current-input-port)))
                      (image-line (thumbnail-filter (string-join lst))))
                 (print (car lst)) ;; first line
                 (when (< 0 (string-length image-line))
                   (print image-line)))))))
       entrylist))))


(define (main argv)
  (output-blog (string-append ot-blog ".ot")
               (cons
                ot-blog-header
                (take* (ot-blog-entrylist) ot-new-entry-limit))
               "")
  (output-blog-list (string-append ot-blog ".list.ot")
                    (ot-blog-entrylist))
  (for-each
   (lambda (x)
     (let ((year_month (car x))
           (entries    (cdr x)))
       (output-blog (string-append ot-blog "." year_month ".ot")
                    (cons
                     ot-blog-header
                     (reverse entries))
                    "##(nolist)")))
   (oldtype:grouping-blog-entries
    (ot-blog-entrylist)))

  (exit 0))

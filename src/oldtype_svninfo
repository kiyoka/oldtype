#!/usr/local/bin/gosh
;; -*- coding: utf-8 -*-
;;;
;;; oldtype_svninfo - parser for 'svn info' format.
;;;
;;;  Copyright (c) 2007 Kiyoka Nishiyama, All rights reserved.
;;;
;;;  Permission is hereby granted, free of charge, to any person
;;;  obtaining a copy of this software and associated documentation
;;;  files (the "Software"), to deal in the Software without restriction,
;;;  including without limitation the rights to use, copy, modify,
;;;  merge, publish, distribute, sublicense, and/or sell copies of
;;;  the Software, and to permit persons to whom the Software is
;;;  furnished to do so, subject to the following conditions:
;;;
;;;  The above copyright notice and this permission notice shall be
;;;  included in all copies or substantial portions of the Software.
;;;
;;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;;  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;;  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;;  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
;;;  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
;;;  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
;;;  OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
;;;  IN THE SOFTWARE.
;;;
;;; $Id: oldtype_to 98 2007-09-21 15:32:25Z kiyoka $
;;;
(use srfi-1)
(use sxml.tools)
(use sxml.serializer)
(use text.html-lite)
(use text.tree)
(use gauche.parseopt)
(use gauche.charconv)
(use util.list)
(use oldtype.parse)
(use oldtype.format)
(use oldtype.util)

;; Main -------------------------------------------------------
(define (main args)

  (define docstrings
    `(
      ,(string-append "oldtype_svninfo version " oldtype:version)
      ""
      " Usage:"
      "	    oldtype_svninfo [type] > outputfile"
      ""
      " type(output format):"
      "     shell"
      ""
      " Options:"
      "     -h ... Display this help message."
      ))

  (define (cerr str)
    (display str (standard-error-port))
    (newline (standard-error-port)))

  (define (display-help)
    (for-each
     (lambda (docstring) (cerr docstring))
     docstrings)
    (exit 4))

  (let* (
	 ;; Dropping the first argument.
	 (_ (cdr args))

	 ;; Checking switches.
	 (_ (parse-options
	     _
	     (
              ("h" () (display-help)))))
         (type (string->symbol (car _))))

    (let1 lst (oldtype:parse-svninfo (current-input-port))
          (case type
            ('shell
             (print
              (tree->string
               (map
                (lambda (alist-of-file)
                  (list
                   (map
                    (lambda (pair)
                      (format "~a=~s;" (car pair) (cdr pair)))
                    alist-of-file)
                   "\n"))
                lst))))
            (else
             (cerr (fomrat "Unsupported type. [~a]" (symbol->string type)))
             (exit 1)))))
  (exit 0))



